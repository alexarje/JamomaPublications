2010 -- ICMC -- DSP




Prior Art
* STK
* Max
* Objective-C
* Smalltalk
* SuperCollider?



What differentiates TTBlue?


Major Features
	
	Reflection: introspection, dynamic-binding, polymorphic value typing
	Class Registry: searchable class factory based on a metadata/database model
	Efficient block processing: including system of manipulating function pointers for process methods
	Scheduler: for asynchronous events and operations
	C++: Can use an compiler on any platform (unlike ObjC, for instance)
	Cross Platform: Mac, Win, Embedded, Linux?
	Clean interface for extending TTBlue with external classes
	Tools for automated stress testing and regression testing
	Automated wrapper creation for generating plug-ins from TTBlue classes very quickly
	Built for multi-channel with support flexible and dynamically changing channel configurations
	Library of ready-built units for audio analysis, generation, and transformation
	How do we approach interpolation facilities?
	Integrated Instrumentation for Debugging and Measuring Performance Metrics
	

An example: 
	The DC blocker?  Or the 1-pole lowpass?


Working Demo Projects
* Max/MSP
* Pd
* VST
* AudioUnits
* SuperCollider
* Embedded devices?


In Context:
* Open Source: Jamoma
* Commercial: Tap.Tools, Hipno


References






ABSTRACT

This paper presents an object-oriented, reflective, application programming interface for C++, with an emphasis on real-time signal processing. It makes use of polymorphic typing, dynamic binding, and introspection to create a cross-platform environment pulling ideas from languages such as Smalltalk and Objective-C while remaining within the bounds of the portable and cross-platform C++ context.  The Jamoma Foundation and DSP Library provide a flexible framework and runtime environment, as well as an expanding collection of unit generators for synthesis, processing, and analysis.  This library has been used in both open source and commercial software projects over the past seven years including Electrotap's Tap.Tools, Cycling '74's Hipno, and the Jamoma Modular Framework.



MORE STUFF...


TTBlue is different from existing DSP libraries (such as Perry Cook's STK) in a number of ways:
* Dynamic environment which itself can be queried for available components (using the TTFactory registry)
* Dynamic binding, message passing architecture (reflective programming)


Different from other C++ libraries in that it provides reflective programming techniques.
Different from other languages with similar features in that it is implemented in C++ with good support for multiple platforms including embedded processor.
 IEC 61508
 Isograph


Allows for:
* programmatic creation of user interfaces
* adaptive wrappers for various plug-in architectures (VST, AU, Max/MSP, SuperCollider)
* dynamic, self-modifying networks of components 




Try to see what we can learn from:
* SuperCollider spawning thing for granular synthesis?
 



Dynamic re-configuration of the signal networks and control structures means that TTBlue can be run on a web server and the signal chain defined (or re-defined) in real time on a web client using a GUI (such as a web browser or iPhone) or SMS.

One application of this is an installation or sculptural art work where you could tweak the behavior by sending it SMS messages using a phone.


I would also like to develop a systematic approach for dealing with interpolation algorithms...
Some sort of an interpolation library in TTBlue
For example, this would allow us to apply the cubic interpolation everywhere without re-writing the code


